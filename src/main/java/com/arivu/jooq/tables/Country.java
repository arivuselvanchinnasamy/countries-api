/*
 * This file is generated by jOOQ.
*/
package com.arivu.jooq.tables;


import com.arivu.jooq.Countries;
import com.arivu.jooq.Keys;
import com.arivu.jooq.tables.records.CountryRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * Countries information
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = 47924238;

    /**
     * The reference instance of <code>countries.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>countries.country.ID</code>. Primary key
     */
    public final TableField<CountryRecord, ULong> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Primary key");

    /**
     * The column <code>countries.country.ISO_2</code>. ISO 3166-1 alpha-2 two-letter code
     */
    public final TableField<CountryRecord, String> ISO_2 = createField("ISO_2", org.jooq.impl.SQLDataType.VARCHAR.length(2).nullable(false), this, "ISO 3166-1 alpha-2 two-letter code");

    /**
     * The column <code>countries.country.NAME</code>. Name of the Country
     */
    public final TableField<CountryRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "Name of the Country");

    /**
     * The column <code>countries.country.CAPITAL</code>. Capital of the Country
     */
    public final TableField<CountryRecord, String> CAPITAL = createField("CAPITAL", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "Capital of the Country");

    /**
     * The column <code>countries.country.LATITUDE</code>. Latitue information of the Country
     */
    public final TableField<CountryRecord, BigDecimal> LATITUDE = createField("LATITUDE", org.jooq.impl.SQLDataType.DECIMAL.precision(30, 20).nullable(false), this, "Latitue information of the Country");

    /**
     * The column <code>countries.country.LONGITUDE</code>. Longitude information of the Country
     */
    public final TableField<CountryRecord, BigDecimal> LONGITUDE = createField("LONGITUDE", org.jooq.impl.SQLDataType.DECIMAL.precision(30, 20).nullable(false), this, "Longitude information of the Country");

    /**
     * The column <code>countries.country.CONTINENT_NAME</code>. Continent Name
     */
    public final TableField<CountryRecord, String> CONTINENT_NAME = createField("CONTINENT_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "Continent Name");

    /**
     * The column <code>countries.country.CURRENCY_NAME</code>. Name of currency being used in that Country
     */
    public final TableField<CountryRecord, String> CURRENCY_NAME = createField("CURRENCY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "Name of currency being used in that Country");

    /**
     * The column <code>countries.country.LANGUAGE</code>. Official Languages of that Country
     */
    public final TableField<CountryRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.CLOB, this, "Official Languages of that Country");

    /**
     * Create a <code>countries.country</code> table reference
     */
    public Country() {
        this("country", null);
    }

    /**
     * Create an aliased <code>countries.country</code> table reference
     */
    public Country(String alias) {
        this(alias, COUNTRY);
    }

    private Country(String alias, Table<CountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Country(String alias, Table<CountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Countries information");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Countries.COUNTRIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CountryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_COUNTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountryRecord>> getKeys() {
        return Arrays.<UniqueKey<CountryRecord>>asList(Keys.KEY_COUNTRY_PRIMARY, Keys.KEY_COUNTRY_COUNTRY_UK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Country as(String alias) {
        return new Country(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(String name) {
        return new Country(name, null);
    }
}
