/*
 * This file is generated by jOOQ.
*/
package com.arivu.jooq.tables;


import com.arivu.jooq.Countries;
import com.arivu.jooq.Keys;
import com.arivu.jooq.tables.records.ContinentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * World Continent's information
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Continent extends TableImpl<ContinentRecord> {

    private static final long serialVersionUID = 1347350241;

    /**
     * The reference instance of <code>countries.continent</code>
     */
    public static final Continent CONTINENT = new Continent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContinentRecord> getRecordType() {
        return ContinentRecord.class;
    }

    /**
     * The column <code>countries.continent.ID</code>. Primary key
     */
    public final TableField<ContinentRecord, ULong> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Primary key");

    /**
     * The column <code>countries.continent.CONTINENT_CODE</code>. Continent Code
     */
    public final TableField<ContinentRecord, String> CONTINENT_CODE = createField("CONTINENT_CODE", org.jooq.impl.SQLDataType.VARCHAR.length(2).nullable(false), this, "Continent Code");

    /**
     * The column <code>countries.continent.CONTINENT_NAME</code>. Continent Name
     */
    public final TableField<ContinentRecord, String> CONTINENT_NAME = createField("CONTINENT_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "Continent Name");

    /**
     * Create a <code>countries.continent</code> table reference
     */
    public Continent() {
        this("continent", null);
    }

    /**
     * Create an aliased <code>countries.continent</code> table reference
     */
    public Continent(String alias) {
        this(alias, CONTINENT);
    }

    private Continent(String alias, Table<ContinentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Continent(String alias, Table<ContinentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "World Continent's information");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Countries.COUNTRIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContinentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CONTINENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContinentRecord> getPrimaryKey() {
        return Keys.KEY_CONTINENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContinentRecord>> getKeys() {
        return Arrays.<UniqueKey<ContinentRecord>>asList(Keys.KEY_CONTINENT_PRIMARY, Keys.KEY_CONTINENT_CONTINENT_UK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Continent as(String alias) {
        return new Continent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Continent rename(String name) {
        return new Continent(name, null);
    }
}
