/*
 * This file is generated by jOOQ.
*/
package com.arivu.jooq.tables.records;


import com.arivu.jooq.tables.Continent;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * World Continent's information
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContinentRecord extends UpdatableRecordImpl<ContinentRecord> implements Record3<ULong, String, String> {

    private static final long serialVersionUID = 2056054475;

    /**
     * Setter for <code>countries.continent.ID</code>. Primary key
     */
    public ContinentRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>countries.continent.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>countries.continent.CONTINENT_CODE</code>. Continent Code
     */
    public ContinentRecord setContinentCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>countries.continent.CONTINENT_CODE</code>. Continent Code
     */
    public String getContinentCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>countries.continent.CONTINENT_NAME</code>. Continent Name
     */
    public ContinentRecord setContinentName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>countries.continent.CONTINENT_NAME</code>. Continent Name
     */
    public String getContinentName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<ULong, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<ULong, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return Continent.CONTINENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Continent.CONTINENT.CONTINENT_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Continent.CONTINENT.CONTINENT_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getContinentCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getContinentName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinentRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinentRecord value2(String value) {
        setContinentCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinentRecord value3(String value) {
        setContinentName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinentRecord values(ULong value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContinentRecord
     */
    public ContinentRecord() {
        super(Continent.CONTINENT);
    }

    /**
     * Create a detached, initialised ContinentRecord
     */
    public ContinentRecord(ULong id, String continentCode, String continentName) {
        super(Continent.CONTINENT);

        set(0, id);
        set(1, continentCode);
        set(2, continentName);
    }
}
